File path: gitpack/gitpack/settings.py

Content:
@@ -100,6 +100,47 @@
     },
 ]
 
+# Loggers
+# Logging configuration that logs to console if DEBUG is True
+if DEBUG:
+    LOGGING = {
+        'version': 1,
+        'disable_existing_loggers': False,
+        'formatters': {
+            'colored': {
+                '()': 'colorlog.ColoredFormatter',
+                'format': '%(log_color)s%(levelname)-8s%(reset)s %(log_color)s%(message)s',
+                'log_colors': {
+                    'DEBUG': 'cyan',
+                    'INFO': 'green',
+                    'WARNING': 'yellow',
+                    'ERROR': 'red',
+                    'CRITICAL': 'red,bg_white',
+                },
+            },
+        },
+        'handlers': {
+            'console': {
+                'class': 'colorlog.StreamHandler',
+                'formatter': 'colored',
+                'level': 'DEBUG',
+            },
+        },
+        'loggers': {
+            '': {  # Root logger
+                'handlers': ['console'],
+                'level': 'DEBUG',
+            },
+            'django': {
+                'handlers': ['console'],
+                'level': 'INFO',
+                'propagate': False,
+            },
+        },
+    }
+
+
+
 
 # Internationalization
 # https://docs.djangoproject.com/en/5.1/topics/i18n/

File path: gitpack/main/lib/openai.py

Content:
@@ -1,6 +1,7 @@
 from openai import OpenAI
 import json, re
 from django.conf import settings
+import logging
 
 class OpenAIHelper:
 
@@ -19,19 +20,13 @@ def get_code_review(self, code):
             Only provide a RFC8259 compliant JSON response. Follow this format without deviation. Do not include any other text or explanations. Also, provide json in raw string format without any quotes,
             ```
             {
-                "overall": {
-                    // overall feedback summary goes here.
-                    "summary": "",
-                    // positive feedback goes here. provide a list of string type. This section is optional. If you don't see significant positives skip this section.
-                    "positives": ["", ""],
-                    // areas of improvement goes here. provide a a list of string type. This section is optional. If you don't see any areas of improvements skip this section.
-                    "improvements": ["", ""]
-                },
                 "inline_feedback": [
-                        // line specific feedback goes here. use the diff notation to provide the absolute line number and diff offset
+                        // Inline feedback goes here. Limit the inline feedback to only where there is important areas for improvement. Avoid providing feedback unless it is significant and very impactful. Avoid positive feedback.
                         { 
                             // relative path of the file
                             "file_path": "",
+                            // actual line content of the code for which feedback is provided.
+                            "actual_line_content": "",
                             // start side of the diff for the multiple line feedback. Response should be strictly either "LEFT" or "RIGHT"
                             "start_side": "",
                             // start line number of the code in the file. This has to be an absolute line number. It's important to provide the correct line number based on the diff offset.
@@ -46,6 +41,14 @@ def get_code_review(self, code):
                             "suggested_change": ""
                         },
                 ],
+                "summary": {
+                    // feedback summary goes here. Don't just repeat the inline feedback, but provide a strong summary and comment on the overall changes.
+                    "summary": "",
+                    // positive feedback goes here. This section is optional. If you don't see significant positives skip this section.
+                    "positives": ["", ""],
+                    // areas of improvement goes here. This section is optional. If you don't see any areas of improvements skip this section.
+                    "improvements": ["", ""]
+                },
             }
             ```
 
@@ -55,13 +58,20 @@ def get_code_review(self, code):
 
             === Code ends here
         """ % (code)
-        #print('prompt:', prompt) 
-        
+
+        #logging.debug('Prompt: %s', prompt)
+
         response = self.client.chat.completions.create(
             model="gpt-4o",
             messages=[
-                {"role": "system", "content": "You are a code reviewer."},
-                {"role": "user", "content": prompt}
+                {
+                    "role": "system", 
+                    "content": "You are a Staff or Principal level Software Engineer. In this contexrt you are acting as a code reviewer. You provide only the high quality feedback and avoid trivial feedback."
+                },
+                {
+                    "role": "user", 
+                    "content": prompt
+                }
             ],
             max_tokens=1500
         )
@@ -72,14 +82,46 @@ def get_code_review(self, code):
             try:
                 response_json_str = re.search(r'^(?:(?:```json)|(?:```)|(?:json))(.*?)(?:```)?$', response_content, re.DOTALL).group(1)
             except AttributeError:
-                print("response: ", response_content)
+                logging.error('No JSON response found in GPT-4 response')
                 raise ValueError('No JSON response found in GPT-4 response')
             try:
                 response_json = json.loads(response_json_str)
             except json.JSONDecodeError:
-                print("response_json_str: ", response_json_str)
+                logging.error('Invalid JSON response from GPT-4. Response: %s', response_json_str)
                 raise ValueError('Invalid JSON response from GPT-4')
-        from pprint import pprint
-        print("response_json: ")
-        pprint(response_json)
-        return response_json
+        
+        logging.debug('GPT-4 response:\n\n%s\n\n', json.dumps(response_json, indent=4, sort_keys=True))
+
+        return self._parse_gpt_response(response_json)
+
+    def _parse_gpt_response(self, feedback_json):
+        overall_feedback = f"## Code Review for this PR\n\n{feedback_json['summary']['summary']}\n\n"
+        if feedback_json['summary'].get('positives'):
+            if type(feedback_json['summary']['positives']) is list:
+                positives = ''.join(f'- {s}\n' for s in feedback_json['summary']['positives'])
+            else:
+                positives = feedback_json['summary']['positives']
+            overall_feedback += f"### Positives:\n\n{positives}\n\n"
+        if feedback_json['summary'].get('improvements'):
+            #if type of feedback_json['summary']['improvements']) is list
+            if type(feedback_json['summary']['improvements']) is list:
+                improvements = ''.join(f'- {s}\n' for s in feedback_json['summary']['improvements'])
+            else:
+                improvements = feedback_json['summary']['improvements']
+            overall_feedback += f"### Areas of Improvement:\n\n{improvements}\n\n"
+        
+        # Based on GPT feedback, add specific line comments if improvements are needed
+        line_comments = []
+        if feedback_json.get('inline_feedback'):
+            for feedback in feedback_json['inline_feedback']:
+                line_comments.append({
+                    'body': f"{feedback['feedback']}",
+                    'filename': feedback['file_path'],
+                    'start_line': feedback['start_line'],
+                    'start_side': feedback['start_side'],
+                    'end_line': feedback['end_line'],
+                    'end_side': feedback['end_side'],
+                    'suggested_change': feedback.get('suggested_change', None)
+                })
+        
+        return overall_feedback, line_comments

File path: gitpack/main/tests.py

Content:
@@ -1,3 +1,22 @@
 from django.test import TestCase
+from .lib.openai import OpenAIHelper
+
+
+class TestOpenAIHelper(TestCase):
+    
+    def test_get_code_review(self):
+        openai_helper = OpenAIHelper()
+
+        # Load test data from a fixture file
+        with open('gitpack/main/fixtures/test_code_review_query.txt', 'r') as file:
+            test_query = file.read()
+
+        overall_feedback, line_comments = openai_helper.get_code_review(test_query)
+        
+        from pprint import pprint
+        pprint(overall_feedback)
+        pprint(line_comments)
+
+        self.assertIsNotNone(overall_feedback)
+        self.assertIsNotNone(line_comments)
 
-# Create your tests here.

File path: gitpack/main/views/_github_webhook_wrapper.py

Content:
@@ -24,13 +24,18 @@ def get_github_client(self, payload):
         raise RuntimeError('Invalid payload')
         
 
-    def on(self, event_type, action=None):
+    def on(self, event_type, actions=None):
         """
         Decorator to register event handlers for GitHub webhook events.
         """
         def decorator(func):
-            key = (event_type, action)
-            self.event_handlers[key] = func
+            if isinstance(actions, tuple):
+                for action in actions:
+                    key = (event_type, action)
+                    self.event_handlers[key] = func
+            else:
+                key = (event_type, actions)
+                self.event_handlers[key] = func
             return func
         return decorator
 
@@ -56,7 +61,6 @@ def github_webhook(self, request):
         """
         Main view to handle GitHub webhook requests.
         """
-        print('github_webhook: ENTER', request.headers)
         if request.method != 'POST':
             return HttpResponseForbidden('Method not allowed')
 
@@ -69,9 +73,7 @@ def github_webhook(self, request):
 
         payload = json.loads(request.body)
         action = payload.get('action')
-        print('event_handlers', self.event_handlers, event_type, action)
         handler = self.event_handlers.get((event_type, action)) or self.event_handlers.get((event_type, None))
-        print('github_webhook: handler', handler)
         if handler:
             return handler(request, payload)
         else:

File path: gitpack/main/views/github_webhook_events.py

Content:
@@ -1,11 +1,13 @@
-from .github_webhook import GithubApp
+from ._github_webhook_wrapper import GithubApp
 from django.http import JsonResponse
 from main.lib.openai import OpenAIHelper
+import logging
+import github
 
 github_app = GithubApp()
 
 # Handle pull request opened
-@github_app.on(event_type='pull_request', action='opened')
+@github_app.on(event_type='pull_request', actions=('opened', 'synchronize'))
 def handle_pull_request_opened(request, payload):
     # Get the repository and pull request number from the payload
     repo_full_name = payload['repository']['full_name']
@@ -22,6 +24,8 @@ def handle_pull_request_opened(request, payload):
     # Get the list of files changed in the pull request
     files_changed = pull_request.get_files()
 
+    latest_commit = pull_request.get_commits()[0]
+
     query = ""
 
     # Loop through each changed file
@@ -31,79 +35,47 @@ def handle_pull_request_opened(request, payload):
         file_patch = file.patch
         query += f"File path: {file.filename}\n\nContent:\n{file.patch}\n\n"
 
+    logging.debug(f"Query: {query}")
+
     # Initialize OpenAIHelper
     openai_helper = OpenAIHelper()
-    feedback_json = openai_helper.get_code_review(query)
-
-    overall_feedback = f"## Code Review for PR: {pr_title}\n\n{feedback_json['overall']['summary']}\n\n"
-    if feedback_json['overall'].get('positives'):
-        if type(feedback_json['overall']['positives']) is list:
-            positives = ''.join(f'- {s}\n' for s in feedback_json['overall']['positives'])
-        else:
-            positives = feedback_json['overall']['positives']
-        overall_feedback += f"### Positives:\n\n{positives}\n\n"
-    if feedback_json['overall'].get('improvements'):
-        #if type of feedback_json['overall']['improvements']) is list
-        if type(feedback_json['overall']['improvements']) is list:
-            improvements = ''.join(f'- {s}\n' for s in feedback_json['overall']['improvements'])
-        else:
-            improvements = feedback_json['overall']['improvements']
-        overall_feedback += f"### Areas of Improvement:\n\n{improvements}\n\n"
-    
-    # Based on GPT feedback, add specific line comments if improvements are needed
-    line_comments = []
-    if feedback_json.get('inline_feedback'):
-        for feedback in feedback_json['inline_feedback']:
-            line_comments.append({
-                'body': f"{feedback['feedback']}",
-                'filename': feedback['file_path'],
-                'start_line': feedback['start_line'],
-                'start_side': feedback['start_side'],
-                'end_line': feedback['end_line'],
-                'end_side': feedback['end_side'],
-                'suggested_change': feedback.get('suggested_change', None)
-            })
-
-    # Post overall review comment
-    pull_request.create_issue_comment(overall_feedback)
+    overall_feedback, line_comments = openai_helper.get_code_review(query)
 
-    print('line_comments:', line_comments, 'pull_request.head.sha:', pull_request.head.sha)
-    latest_commit = pull_request.get_commits()[0]
     # Post line-specific comments
     for comment in line_comments:
-        if comment['start_line'] == comment['end_line']:
-            pull_request.create_review_comment(
-                body=comment['body'], 
-                commit=latest_commit,
-                path=comment['filename'], 
-                line=comment['start_line'], 
-                side=comment['start_side']
-            )
-        else:
-            pull_request.create_review_comment(
-                body=comment['body'], 
-                commit=latest_commit,
-                path=comment['filename'], 
-                line=comment['end_line'], 
-                side=comment['end_side'],
-                start_line=comment['start_line'], 
-                start_side=comment['start_side']
-            )  
+        try:
+            if comment['start_line'] == comment['end_line']:
+                pull_request.create_review_comment(
+                    body=comment['body'], 
+                    commit=latest_commit,
+                    path=comment['filename'], 
+                    line=comment['start_line'], 
+                    side=comment['start_side']
+                )
+            else:
+                pull_request.create_review_comment(
+                    body=comment['body'], 
+                    commit=latest_commit,
+                    path=comment['filename'], 
+                    line=comment['end_line'], 
+                    side=comment['end_side'],
+                    start_line=comment['start_line'], 
+                    start_side=comment['start_side']
+                )
+        except github.GithubException as e:
+            if e.status == 422 and 'Validation Failed' in str(e):
+                # Handle validation failed exception
+                logging.error(f"Validation failed when creating review comment: {e}")
+                # You might want to skip this comment or try an alternative approach
+                continue
+            else:
+                # Handle other GitHub exceptions
+                logging.error(f"GitHub API error when creating review comment: {e}")
+                # You might want to retry or handle the error in some way
+                raise
 
-    return JsonResponse({'status': f"Handled pull_request.opened: {pr_number}"}, status=200)
+    # Post overall review comment
+    pull_request.create_issue_comment(overall_feedback)  
 
-# Handle issue opened
-@github_app.on(event_type='issues', action='opened')
-def handle_issue_opened(request, payload):
-    issue_title = payload['issue']['title']
-    issue_url = payload['issue']['html_url']
-    print(f"Issue opened: {issue_title} ({issue_url})")
-    return JsonResponse({'status': f"Handled issues.opened: {issue_title}"}, status=200)
+    return JsonResponse({'status': f"Handled pull_request.opened: {pr_number}"}, status=200)
 
-# Additional events can be handled in a similar way
-@github_app.on(event_type='pull_request', action='closed')
-def handle_pull_request_closed(request, payload):
-    pr_title = payload['pull_request']['title']
-    pr_url = payload['pull_request']['html_url']
-    print(f"Pull request closed: {pr_title} ({pr_url})")
-    return JsonResponse({'status': f"Handled pull_request.closed: {pr_title}"}, status=200)

File path: load_env.sh

Content:
@@ -0,0 +1,2 @@
+#!/bin/bash
+export $(grep -v '^#' .env | xargs)
\ No newline at end of file
