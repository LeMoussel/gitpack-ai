{
    "gitpack/gitpack/settings.py": "@@ -100,6 +100,47 @@\n     },\n ]\n \n+# Loggers\n+# Logging configuration that logs to console if DEBUG is True\n+if DEBUG:\n+    LOGGING = {\n+        'version': 1,\n+        'disable_existing_loggers': False,\n+        'formatters': {\n+            'colored': {\n+                '()': 'colorlog.ColoredFormatter',\n+                'format': '%(log_color)s%(levelname)-8s%(reset)s %(log_color)s%(message)s',\n+                'log_colors': {\n+                    'DEBUG': 'cyan',\n+                    'INFO': 'green',\n+                    'WARNING': 'yellow',\n+                    'ERROR': 'red',\n+                    'CRITICAL': 'red,bg_white',\n+                },\n+            },\n+        },\n+        'handlers': {\n+            'console': {\n+                'class': 'colorlog.StreamHandler',\n+                'formatter': 'colored',\n+                'level': 'DEBUG',\n+            },\n+        },\n+        'loggers': {\n+            '': {  # Root logger\n+                'handlers': ['console'],\n+                'level': 'DEBUG',\n+            },\n+            'django': {\n+                'handlers': ['console'],\n+                'level': 'INFO',\n+                'propagate': False,\n+            },\n+        },\n+    }\n+\n+\n+\n \n # Internationalization\n # https://docs.djangoproject.com/en/5.1/topics/i18n/",
    "gitpack/main/lib/openai.py": "@@ -1,6 +1,7 @@\n from openai import OpenAI\n import json, re\n from django.conf import settings\n+import logging\n \n class OpenAIHelper:\n \n@@ -19,19 +20,13 @@ def get_code_review(self, code):\n             Only provide a RFC8259 compliant JSON response. Follow this format without deviation. Do not include any other text or explanations. Also, provide json in raw string format without any quotes,\n             ```\n             {\n-                \"overall\": {\n-                    // overall feedback summary goes here.\n-                    \"summary\": \"\",\n-                    // positive feedback goes here. provide a list of string type. This section is optional. If you don't see significant positives skip this section.\n-                    \"positives\": [\"\", \"\"],\n-                    // areas of improvement goes here. provide a a list of string type. This section is optional. If you don't see any areas of improvements skip this section.\n-                    \"improvements\": [\"\", \"\"]\n-                },\n                 \"inline_feedback\": [\n-                        // line specific feedback goes here. use the diff notation to provide the absolute line number and diff offset\n+                        // Inline feedback goes here. Limit the inline feedback to only where there is important areas for improvement. Avoid providing feedback unless it is significant and very impactful. Avoid positive feedback.\n                         { \n                             // relative path of the file\n                             \"file_path\": \"\",\n+                            // actual line content of the code for which feedback is provided.\n+                            \"actual_line_content\": \"\",\n                             // start side of the diff for the multiple line feedback. Response should be strictly either \"LEFT\" or \"RIGHT\"\n                             \"start_side\": \"\",\n                             // start line number of the code in the file. This has to be an absolute line number. It's important to provide the correct line number based on the diff offset.\n@@ -46,6 +41,14 @@ def get_code_review(self, code):\n                             \"suggested_change\": \"\"\n                         },\n                 ],\n+                \"summary\": {\n+                    // feedback summary goes here. Don't just repeat the inline feedback, but provide a strong summary and comment on the overall changes.\n+                    \"summary\": \"\",\n+                    // positive feedback goes here. This section is optional. If you don't see significant positives skip this section.\n+                    \"positives\": [\"\", \"\"],\n+                    // areas of improvement goes here. This section is optional. If you don't see any areas of improvements skip this section.\n+                    \"improvements\": [\"\", \"\"]\n+                },\n             }\n             ```\n \n@@ -55,13 +58,20 @@ def get_code_review(self, code):\n \n             === Code ends here\n         \"\"\" % (code)\n-        #print('prompt:', prompt) \n-        \n+\n+        #logging.debug('Prompt: %s', prompt)\n+\n         response = self.client.chat.completions.create(\n             model=\"gpt-4o\",\n             messages=[\n-                {\"role\": \"system\", \"content\": \"You are a code reviewer.\"},\n-                {\"role\": \"user\", \"content\": prompt}\n+                {\n+                    \"role\": \"system\", \n+                    \"content\": \"You are a Staff or Principal level Software Engineer. In this contexrt you are acting as a code reviewer. You provide only the high quality feedback and avoid trivial feedback.\"\n+                },\n+                {\n+                    \"role\": \"user\", \n+                    \"content\": prompt\n+                }\n             ],\n             max_tokens=1500\n         )\n@@ -72,14 +82,46 @@ def get_code_review(self, code):\n             try:\n                 response_json_str = re.search(r'^(?:(?:```json)|(?:```)|(?:json))(.*?)(?:```)?$', response_content, re.DOTALL).group(1)\n             except AttributeError:\n-                print(\"response: \", response_content)\n+                logging.error('No JSON response found in GPT-4 response')\n                 raise ValueError('No JSON response found in GPT-4 response')\n             try:\n                 response_json = json.loads(response_json_str)\n             except json.JSONDecodeError:\n-                print(\"response_json_str: \", response_json_str)\n+                logging.error('Invalid JSON response from GPT-4. Response: %s', response_json_str)\n                 raise ValueError('Invalid JSON response from GPT-4')\n-        from pprint import pprint\n-        print(\"response_json: \")\n-        pprint(response_json)\n-        return response_json\n+        \n+        logging.debug('GPT-4 response:\\n\\n%s\\n\\n', json.dumps(response_json, indent=4, sort_keys=True))\n+\n+        return self._parse_gpt_response(response_json)\n+\n+    def _parse_gpt_response(self, feedback_json):\n+        overall_feedback = f\"## Code Review for this PR\\n\\n{feedback_json['summary']['summary']}\\n\\n\"\n+        if feedback_json['summary'].get('positives'):\n+            if type(feedback_json['summary']['positives']) is list:\n+                positives = ''.join(f'- {s}\\n' for s in feedback_json['summary']['positives'])\n+            else:\n+                positives = feedback_json['summary']['positives']\n+            overall_feedback += f\"### Positives:\\n\\n{positives}\\n\\n\"\n+        if feedback_json['summary'].get('improvements'):\n+            #if type of feedback_json['summary']['improvements']) is list\n+            if type(feedback_json['summary']['improvements']) is list:\n+                improvements = ''.join(f'- {s}\\n' for s in feedback_json['summary']['improvements'])\n+            else:\n+                improvements = feedback_json['summary']['improvements']\n+            overall_feedback += f\"### Areas of Improvement:\\n\\n{improvements}\\n\\n\"\n+        \n+        # Based on GPT feedback, add specific line comments if improvements are needed\n+        line_comments = []\n+        if feedback_json.get('inline_feedback'):\n+            for feedback in feedback_json['inline_feedback']:\n+                line_comments.append({\n+                    'body': f\"{feedback['feedback']}\",\n+                    'filename': feedback['file_path'],\n+                    'start_line': feedback['start_line'],\n+                    'start_side': feedback['start_side'],\n+                    'end_line': feedback['end_line'],\n+                    'end_side': feedback['end_side'],\n+                    'suggested_change': feedback.get('suggested_change', None)\n+                })\n+        \n+        return overall_feedback, line_comments",
    "gitpack/main/tests.py": "@@ -1,3 +1,22 @@\n from django.test import TestCase\n+from .lib.openai import OpenAIHelper\n+\n+\n+class TestOpenAIHelper(TestCase):\n+    \n+    def test_get_code_review(self):\n+        openai_helper = OpenAIHelper()\n+\n+        # Load test data from a fixture file\n+        with open('gitpack/main/fixtures/test_code_review_query.txt', 'r') as file:\n+            test_query = file.read()\n+\n+        overall_feedback, line_comments = openai_helper.get_code_review(test_query)\n+        \n+        from pprint import pprint\n+        pprint(overall_feedback)\n+        pprint(line_comments)\n+\n+        self.assertIsNotNone(overall_feedback)\n+        self.assertIsNotNone(line_comments)\n \n-# Create your tests here.",
    "gitpack/main/views/_github_webhook_wrapper.py": "@@ -24,13 +24,18 @@ def get_github_client(self, payload):\n         raise RuntimeError('Invalid payload')\n         \n \n-    def on(self, event_type, action=None):\n+    def on(self, event_type, actions=None):\n         \"\"\"\n         Decorator to register event handlers for GitHub webhook events.\n         \"\"\"\n         def decorator(func):\n-            key = (event_type, action)\n-            self.event_handlers[key] = func\n+            if isinstance(actions, tuple):\n+                for action in actions:\n+                    key = (event_type, action)\n+                    self.event_handlers[key] = func\n+            else:\n+                key = (event_type, actions)\n+                self.event_handlers[key] = func\n             return func\n         return decorator\n \n@@ -56,7 +61,6 @@ def github_webhook(self, request):\n         \"\"\"\n         Main view to handle GitHub webhook requests.\n         \"\"\"\n-        print('github_webhook: ENTER', request.headers)\n         if request.method != 'POST':\n             return HttpResponseForbidden('Method not allowed')\n \n@@ -69,9 +73,7 @@ def github_webhook(self, request):\n \n         payload = json.loads(request.body)\n         action = payload.get('action')\n-        print('event_handlers', self.event_handlers, event_type, action)\n         handler = self.event_handlers.get((event_type, action)) or self.event_handlers.get((event_type, None))\n-        print('github_webhook: handler', handler)\n         if handler:\n             return handler(request, payload)\n         else:",
    "gitpack/main/views/github_webhook_events.py": "@@ -1,11 +1,13 @@\n-from .github_webhook import GithubApp\n+from ._github_webhook_wrapper import GithubApp\n from django.http import JsonResponse\n from main.lib.openai import OpenAIHelper\n+import logging\n+import github\n \n github_app = GithubApp()\n \n # Handle pull request opened\n-@github_app.on(event_type='pull_request', action='opened')\n+@github_app.on(event_type='pull_request', actions=('opened', 'synchronize'))\n def handle_pull_request_opened(request, payload):\n     # Get the repository and pull request number from the payload\n     repo_full_name = payload['repository']['full_name']\n@@ -22,6 +24,8 @@ def handle_pull_request_opened(request, payload):\n     # Get the list of files changed in the pull request\n     files_changed = pull_request.get_files()\n \n+    latest_commit = pull_request.get_commits()[0]\n+\n     query = \"\"\n \n     # Loop through each changed file\n@@ -31,79 +35,47 @@ def handle_pull_request_opened(request, payload):\n         file_patch = file.patch\n         query += f\"File path: {file.filename}\\n\\nContent:\\n{file.patch}\\n\\n\"\n \n+    logging.debug(f\"Query: {query}\")\n+\n     # Initialize OpenAIHelper\n     openai_helper = OpenAIHelper()\n-    feedback_json = openai_helper.get_code_review(query)\n-\n-    overall_feedback = f\"## Code Review for PR: {pr_title}\\n\\n{feedback_json['overall']['summary']}\\n\\n\"\n-    if feedback_json['overall'].get('positives'):\n-        if type(feedback_json['overall']['positives']) is list:\n-            positives = ''.join(f'- {s}\\n' for s in feedback_json['overall']['positives'])\n-        else:\n-            positives = feedback_json['overall']['positives']\n-        overall_feedback += f\"### Positives:\\n\\n{positives}\\n\\n\"\n-    if feedback_json['overall'].get('improvements'):\n-        #if type of feedback_json['overall']['improvements']) is list\n-        if type(feedback_json['overall']['improvements']) is list:\n-            improvements = ''.join(f'- {s}\\n' for s in feedback_json['overall']['improvements'])\n-        else:\n-            improvements = feedback_json['overall']['improvements']\n-        overall_feedback += f\"### Areas of Improvement:\\n\\n{improvements}\\n\\n\"\n-    \n-    # Based on GPT feedback, add specific line comments if improvements are needed\n-    line_comments = []\n-    if feedback_json.get('inline_feedback'):\n-        for feedback in feedback_json['inline_feedback']:\n-            line_comments.append({\n-                'body': f\"{feedback['feedback']}\",\n-                'filename': feedback['file_path'],\n-                'start_line': feedback['start_line'],\n-                'start_side': feedback['start_side'],\n-                'end_line': feedback['end_line'],\n-                'end_side': feedback['end_side'],\n-                'suggested_change': feedback.get('suggested_change', None)\n-            })\n-\n-    # Post overall review comment\n-    pull_request.create_issue_comment(overall_feedback)\n+    overall_feedback, line_comments = openai_helper.get_code_review(query)\n \n-    print('line_comments:', line_comments, 'pull_request.head.sha:', pull_request.head.sha)\n-    latest_commit = pull_request.get_commits()[0]\n     # Post line-specific comments\n     for comment in line_comments:\n-        if comment['start_line'] == comment['end_line']:\n-            pull_request.create_review_comment(\n-                body=comment['body'], \n-                commit=latest_commit,\n-                path=comment['filename'], \n-                line=comment['start_line'], \n-                side=comment['start_side']\n-            )\n-        else:\n-            pull_request.create_review_comment(\n-                body=comment['body'], \n-                commit=latest_commit,\n-                path=comment['filename'], \n-                line=comment['end_line'], \n-                side=comment['end_side'],\n-                start_line=comment['start_line'], \n-                start_side=comment['start_side']\n-            )  \n+        try:\n+            if comment['start_line'] == comment['end_line']:\n+                pull_request.create_review_comment(\n+                    body=comment['body'], \n+                    commit=latest_commit,\n+                    path=comment['filename'], \n+                    line=comment['start_line'], \n+                    side=comment['start_side']\n+                )\n+            else:\n+                pull_request.create_review_comment(\n+                    body=comment['body'], \n+                    commit=latest_commit,\n+                    path=comment['filename'], \n+                    line=comment['end_line'], \n+                    side=comment['end_side'],\n+                    start_line=comment['start_line'], \n+                    start_side=comment['start_side']\n+                )\n+        except github.GithubException as e:\n+            if e.status == 422 and 'Validation Failed' in str(e):\n+                # Handle validation failed exception\n+                logging.error(f\"Validation failed when creating review comment: {e}\")\n+                # You might want to skip this comment or try an alternative approach\n+                continue\n+            else:\n+                # Handle other GitHub exceptions\n+                logging.error(f\"GitHub API error when creating review comment: {e}\")\n+                # You might want to retry or handle the error in some way\n+                raise\n \n-    return JsonResponse({'status': f\"Handled pull_request.opened: {pr_number}\"}, status=200)\n+    # Post overall review comment\n+    pull_request.create_issue_comment(overall_feedback)  \n \n-# Handle issue opened\n-@github_app.on(event_type='issues', action='opened')\n-def handle_issue_opened(request, payload):\n-    issue_title = payload['issue']['title']\n-    issue_url = payload['issue']['html_url']\n-    print(f\"Issue opened: {issue_title} ({issue_url})\")\n-    return JsonResponse({'status': f\"Handled issues.opened: {issue_title}\"}, status=200)\n+    return JsonResponse({'status': f\"Handled pull_request.opened: {pr_number}\"}, status=200)\n \n-# Additional events can be handled in a similar way\n-@github_app.on(event_type='pull_request', action='closed')\n-def handle_pull_request_closed(request, payload):\n-    pr_title = payload['pull_request']['title']\n-    pr_url = payload['pull_request']['html_url']\n-    print(f\"Pull request closed: {pr_title} ({pr_url})\")\n-    return JsonResponse({'status': f\"Handled pull_request.closed: {pr_title}\"}, status=200)",
    "load_env.sh": "@@ -0,0 +1,2 @@\n+#!/bin/bash\n+export $(grep -v '^#' .env | xargs)\n\\ No newline at end of file"
}